name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_NAME: 'node-modules'

jobs:
  # Job 1: Install Dependencies
  install:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 💾 Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}

  # Job 2: Code Quality
  lint-and-format:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    needs: install
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install dependencies (if needed)
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔍 Run ESLint
        run: npm run lint
        
      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 📊 Upload ESLint results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: eslint-results.json

  # Job 3: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: install
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install dependencies (if needed)
        run: npm ci --prefer-offline --no-audit
        
      - name: 🧪 Run tests
        run: npm run test:coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # Job 4: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install dependencies (if needed)
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build project
        run: npm run build
        
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

      - name: 📊 Check build size
        run: |
          echo "## Build Size Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -type f -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            filename=$(basename "$file")
            echo "| $filename | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 5: Lighthouse (only on PRs)
  lighthouse:
    name: 🔍 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install dependencies (if needed)
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build project
        run: npm run build
        
      - name: 🔍 Run Lighthouse
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 6: Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: install
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 7: Deployment Preview (only on PRs)
  deploy-preview:
    name: 🌐 Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Job 8: Notify Success
  notify:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build, security]
    if: success()
    
    steps:
      - name: 🎉 Success notification
        run: |
          echo "## ✅ All checks passed! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "Your code is ready for review!" >> $GITHUB_STEP_SUMMARY